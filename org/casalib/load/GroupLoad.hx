/*	CASA Lib for ActionScript 3.0	Copyright (c) 2009, Aaron Clinger & Contributors of CASA Lib	All rights reserved.		Redistribution and use in source and binary forms, with or without	modification, are permitted provided that the following conditions are met:		- Redistributions of source code must retain the above copyright notice,	  this list of conditions and the following disclaimer.		- Redistributions in binary form must reproduce the above copyright notice,	  this list of conditions and the following disclaimer in the documentation	  and/or other materials provided with the distribution.		- Neither the name of the CASA Lib nor the names of its contributors	  may be used to endorse or promote products derived from this software	  without specific prior written permission.		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE	ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE	LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE	POSSIBILITY OF SUCH DAMAGE.*/package org.casalib.load; 	import flash.utils.Dictionary;	import org.casalib.events.LoadEvent;	import org.casalib.events.ProcessEvent;	import org.casalib.math.Percent;	import org.casalib.process.Process;	import org.casalib.process.ProcessGroup;	import org.casalib.util.ArrayUtil;	import org.casalib.load.LoadItem;		/*[Event(name="complete", type="org.casalib.events.LoadEvent")]*/	/*[Event(name="progress", type="org.casalib.events.LoadEvent")]*/		/**		Allows multiple loads to be grouped and treated as one larger load.				@author Aaron Clinger		@version 09/06/09		@example			<code>				package {					import org.casalib.display.CasaMovieClip;					import org.casalib.events.LoadEvent;					import org.casalib.load.GroupLoad;					import org.casalib.load.ImageLoad;															public class MyExample extends CasaMovieClip {						protected var _groupLoad:GroupLoad;						protected var _imageOne:ImageLoad;						protected var _imageTwo:ImageLoad;						protected var _imageThree:ImageLoad;						protected var _imageFour:ImageLoad;																		public function MyExample() {							super();														this._imageOne   = new ImageLoad("test1.jpg");							this._imageTwo   = new ImageLoad("test2.jpg");							this._imageThree = new ImageLoad("test3.jpg");							this._imageFour  = new ImageLoad("test4.jpg");														this._imageTwo.loader.x   = 10;							this._imageThree.loader.x = 20;							this._imageFour.loader.x  = 30;														this.addChild(this._imageOne.loader);							this.addChild(this._imageTwo.loader);							this.addChild(this._imageThree.loader);							this.addChild(this._imageFour.loader);														this._groupLoad = new GroupLoad();							this._groupLoad.addLoad(this._imageOne);							this._groupLoad.addLoad(this._imageTwo);							this._groupLoad.addLoad(this._imageThree);							this._groupLoad.addLoad(this._imageFour);							this._groupLoad.addEventListener(LoadEvent.PROGRESS, this._onProgress);							this._groupLoad.addEventListener(LoadEvent.COMPLETE, this._onComplete);							this._groupLoad.start();						}												protected function _onProgress(e:LoadEvent):void {							trace("Group is " + e.progress.percentage + "% loaded at " + e.Bps + "Bps.");						}												protected function _onComplete(e:LoadEvent):void {							trace("Group has loaded.");						}					}				}			</code>	*/	class GroupLoad extends ProcessGroup {				public var Bps(getBps, null) : Int ;		public var completedLoads(getCompletedLoads, null) : Array<Dynamic> ;		public var incompletedLoads(getIncompletedLoads, null) : Array<Dynamic> ;		public var loaded(getLoaded, null) : Bool ;		public var loading(getLoading, null) : Bool ;		public var loadingLoads(getLoadingLoads, null) : Array<Dynamic> ;		public var loads(getLoads, null) : Array<Dynamic> ;		public var preventCache(getPreventCache, setPreventCache) : Bool;		public var progress(getProgress, null) : Percent ;		public var queuedLoads(getQueuedLoads, null) : Array<Dynamic> ;		var _preventCacheSet:Bool;		var _preventCache:Bool;		var _progress:Percent;		var _Bps:Int;		var _percentMap:Dictionary;						/**			Creates a new GroupLoad.		*/		public function new() {			super();						this._percentMap = new Dictionary();			this._progress   = new Percent();		}				/**			Add a load to the group.						@param load: Load to be added to the group. Can be any class that extends from {@link LoadItem}.			@param percentOfGroup: Defines the percentage of the total group the size of the load item represents; defaults to equal increments.		*/		public function addLoad(load:LoadItem, ?percentOfGroup:Percent = null):Void {			super.addProcess(load);						if (this._preventCacheSet)				load.preventCache = this.preventCache;						this._percentMap[load] = (percentOfGroup == null) ? new Percent(0.01) : percentOfGroup.clone();						if (this.autoStart && !this.completed && this.running)				this._checkTotalPercentValidity();		}				/**			Removes a load item from the group.						@param load: Load to be removed from the group.		*/		public function removeLoad(load:LoadItem):Void {			this._percentMap[load] = null;			delete this._percentMap[load];						super.removeProcess(load);		}				/**			Determines if this GroupLoad contains a specific load item.						@param load: The load item to search for.			@return Returns <code>true</code> if the GroupLoad contains the load item; otherwise <code>false</code>.		*/		public function hasLoad(load:LoadItem):Bool {			return this.hasProcess(load);		}				/**			The loads that compose the group.		*/		public function getLoads():Array<Dynamic> {			return this.processes;		}				/**			The loads that are neither complete nor loading.		*/		public function getQueuedLoads():Array<Dynamic> {			return this.queuedProcesses;		}				/**			The loads that are currently loading.		*/		public function getLoadingLoads():Array<Dynamic> {			return this.runningProcesses;		}				/**			The loads that have not completed.		*/		public function getIncompletedLoads():Array<Dynamic> {			return this.incompletedProcesses;		}				/**			The loads that have completed.		*/		public function getCompletedLoads():Array<Dynamic> {			return this.completedProcesses;		}				/**			Specifies if a random value name/value pair should be appended to every load in GroupLoad <code>true</code>, or not append <code>false</code>; defaults to <code>false</code>.						@see LoadItem#preventCache		*/		public function getPreventCache():Bool{			return this._preventCache;		}				public function setPreventCache(cache:Bool):Bool{			this._preventCacheSet = true;			this._preventCache    = cache;						var items:Array<Dynamic> = this.loads;			var l:Float    = items.length;						while (l--)				items[l].preventCache = this.preventCache;			return cache;		}				/**			The percent that the group is loaded.		*/		public function getProgress():Percent {			return this._progress.clone();		}				/**			Determines if the group is loading <code>true</code>, or if it isn't currently loading <code>false</code>.		*/		public function getLoading():Bool {			return this.running;		}				/**			Determines if all loads in the group are loaded <code>true</code>, or if the group hasn't finished loading <code>false</code>.		*/		public function getLoaded():Bool {			return this.completed;		}				/**			The current download speed of the group in bytes per second.		*/		public function getBps():Int {			return this._Bps;		}				/**			@exclude		*/		public override function start():Void {			this._checkTotalPercentValidity();						super.start();		}				/**			@exclude		*/		public override function addProcess(process:Process):Void {			if (Std.is( process, LoadItem))				this.addLoad(cast( process, LoadItem));		}				/**			@exclude		*/		public override function removeProcess(process:Process):Void {			if (Std.is( process, LoadItem))				this.removeLoad(cast( process, LoadItem));		}				/**			@exclude		*/		public override function destroyProcesses():Void {			var l:UInt = this._processes.length;			var load:LoadItem;						while (l--) {				load = this._processes[l];								this._percentMap[load] = null;				delete this._percentMap[load];								load.destroy();			}						this._processes = new Array();		}				/**			Calls {@link LoadItem#destroy destroy} on all loads in the group and removes them from the GroupLoad.		*/		public function destroyLoads():Void {			this.destroyProcesses();		}				public override function destroy():Void {			this._percentMap = new Dictionary();			this._progress   = new Percent();			this._Bps        = -1;						super.destroy();		}				function _checkTotalPercentValidity():Void {			var perTotal:Int = 0;						for (var i:Dynamic in this._percentMap)				perTotal += this._percentMap[i].decimalPercentage;						if (perTotal != 1)				for (i in this._percentMap)					this._percentMap[i] = new Percent(this._percentMap[i].decimalPercentage / perTotal);		}				override function _addProcessListeners(process:Process):Void {			process.addEventListener(LoadEvent.PROGRESS, this._onProgress, false, 0, true);			process.addEventListener(ProcessEvent.STOP, this._onProcessStopped, false, 0, true);			process.addEventListener(LoadEvent.COMPLETE, this._onLoadCompleted, false, 0, true);		}				override function _removeProcessListeners(process:Process):Void {			process.removeEventListener(LoadEvent.PROGRESS, this._onProgress);			process.removeEventListener(ProcessEvent.STOP, this._onProcessStopped);			process.removeEventListener(LoadEvent.COMPLETE, this._onLoadCompleted);		}				/**			@sends LoadEvent#PROGRESS - Dispatched as the loads in the group are downloading.		*/		function _onProgress(e:LoadEvent):Void {			var speed:Array<Dynamic>     = new Array();			var perTotal:Int = 0;			var p:Array<Dynamic>         = this.processes;			var l:UInt          = p.length;			var load:LoadItem;						while (l--) {				load = p[l];								if (load.loading) {					speed.push(load.Bps);					perTotal += this._percentMap[load].decimalPercentage * load.progress.decimalPercentage;				} else if (load.loaded) {					speed.push(load.Bps);					perTotal += this._percentMap[load].decimalPercentage;				}			}						this._Bps      = int(ArrayUtil.average(speed));			this._progress = new Percent(perTotal);						this.dispatchEvent(this._createDefinedLoadEvent(LoadEvent.PROGRESS));		}				function _onLoadCompleted(e:LoadEvent):Void {			this._checkThreads();		}				/**			@sends LoadEvent#COMPLETE - When GroupLoad has completed loading all the loads in the group.		*/		override function _complete():Void {			super._complete();						this._progress.decimalPercentage = 1;						this.dispatchEvent(this._createDefinedLoadEvent(LoadEvent.COMPLETE));		}				function _createDefinedLoadEvent(type:String):LoadEvent {			var loadEvent:LoadEvent = new LoadEvent(type);			loadEvent.bytesLoaded   = 0;			loadEvent.bytesTotal    = 0;			loadEvent.progress      = this.progress;			loadEvent.Bps           = this.Bps;						return loadEvent;		}	}